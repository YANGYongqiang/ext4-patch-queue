diff --git a/fs/ext4/resize.c b/fs/ext4/resize.c
index 2c6683f..5007511 100644
--- a/fs/ext4/resize.c
+++ b/fs/ext4/resize.c
@@ -821,55 +821,59 @@ static int ext4_add_new_desc(handle_t *handle, struct super_block *sb,
 }
 
 /*
- * ext4_setup_new_desc() sets up group descriptors specified by @input.
+ * ext4_setup_new_desc() sets up group descriptors specified by @flex_gd.
  *
  * @handle: journal handle
  * @sb: super block
+ * @flex_gd: info needed while setting up group descriptors
  */
 static int ext4_setup_new_desc(handle_t *handle, struct super_block *sb,
-			       struct ext4_new_group_data *input)
+			   struct ext4_new_flex_group_data *flex_gd)
 {
-	struct ext4_sb_info * sbi = EXT4_SB(sb);
+	struct ext4_new_group_data *group_data = flex_gd->groups;
 	ext4_group_t group;
 	struct ext4_group_desc *gdp;
 	struct buffer_head *gdb_bh;
-	int gdb_off, gdb_num, err = 0;
+	int i, gdb_off, gdb_num, err = 0;
+	__u16 *bg_flags = flex_gd->bg_flags;
 
-	group = input->group;
+	BUG_ON(flex_gd->count == 0 || group_data == NULL || bg_flags == NULL);
+	group = group_data[0].group;
+	for (i = 0; i < flex_gd->count; group++, i++) {
+		gdb_off = group % EXT4_DESC_PER_BLOCK(sb);
+		gdb_num = group / EXT4_DESC_PER_BLOCK(sb);
+		gdb_bh = EXT4_SB(sb)->s_group_desc[gdb_num];
+		/* Update group descriptor block for new group */
+		gdp = (struct ext4_group_desc *)((char *)gdb_bh->b_data +
+					 gdb_off * EXT4_DESC_SIZE(sb));
 
-	gdb_off = group % EXT4_DESC_PER_BLOCK(sb);
-	gdb_num = group / EXT4_DESC_PER_BLOCK(sb);
+		memset(gdp, 0, EXT4_DESC_SIZE(sb));
+		 /* LV FIXME */
+		ext4_block_bitmap_set(sb, gdp, group_data[i].block_bitmap);
+		ext4_inode_bitmap_set(sb, gdp, group_data[i].inode_bitmap);
+		ext4_inode_table_set(sb, gdp, group_data[i].inode_table);
+		ext4_free_inodes_set(sb, gdp, EXT4_INODES_PER_GROUP(sb));
+		ext4_free_blks_set(sb, gdp, group_data[i].free_blocks_count);
 
-	/*
-	 * get_write_access() has been called on gdb_bh by ext4_add_new_desc().
-	 */
-	gdb_bh = sbi->s_group_desc[gdb_num];
-	/* Update group descriptor block for new group */
-	gdp = (struct ext4_group_desc *)((char *)gdb_bh->b_data +
-				 gdb_off * EXT4_DESC_SIZE(sb));
+		gdp->bg_flags = cpu_to_le16(bg_flags[i]);
 
-	memset(gdp, 0, EXT4_DESC_SIZE(sb));
-	 /* LV FIXME */
-	memset(gdp, 0, EXT4_DESC_SIZE(sb));
-	ext4_block_bitmap_set(sb, gdp, input->block_bitmap); /* LV FIXME */
-	ext4_inode_bitmap_set(sb, gdp, input->inode_bitmap); /* LV FIXME */
-	ext4_inode_table_set(sb, gdp, input->inode_table); /* LV FIXME */
-	ext4_free_blks_set(sb, gdp, input->free_blocks_count);
-	ext4_free_inodes_set(sb, gdp, EXT4_INODES_PER_GROUP(sb));
-	gdp->bg_flags = cpu_to_le16(EXT4_BG_INODE_ZEROED);
-	gdp->bg_checksum = ext4_group_desc_csum(sbi, input->group, gdp);
+		gdp->bg_checksum = ext4_group_desc_csum(EXT4_SB(sb),
+						group, gdp);
 
-	err = ext4_handle_dirty_metadata(handle, NULL, gdb_bh);
-	if (unlikely(err)) {
-		ext4_std_error(sb, err);
-		return err;
-	}
+		err = ext4_handle_dirty_metadata(handle, NULL, gdb_bh);
+		if (unlikely(err)) {
+			ext4_std_error(sb, err);
+			return err;
+		}
 
-	/*
-	 * We can allocate memory for mb_alloc based on the new group
-	 * descriptor
-	 */
-	err = ext4_mb_add_groupinfo(sb, group, gdp);
+		/*
+		 * We can allocate memory for mb_alloc based on the new group
+		 * descriptor
+		 */
+		err = ext4_mb_add_groupinfo(sb, group, gdp);
+		if (err)
+			return err;
+	}
 
 	return err;
 }
